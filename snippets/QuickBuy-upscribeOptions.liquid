<!-- Upscribe -->
{% if product.metafields.sf_upscribe.enable_subscription and product.metafields.sf_upscribe.enable_subscription != 0 and product.metafields.sf_upscribe.enable_subscription != '0' %}
    {% assign subEnable = product.metafields.sf_upscribe.enable_subscription %}

    {% comment %}
    {% if product.handle contains "the-good" %}
    <div class="c-quizProperties">
        <input type="hidden" value="Quiz not taken by user" id="QuizAnswerOne" name="properties[QuizAnswerOne]">
        <input type="hidden" value="Quiz not taken by user" id="QuizAnswerTwo" name="properties[QuizAnswerTwo]">
        <input type="hidden" value="Quiz not taken by user" id="QuizAnswerThree" name="properties[QuizAnswerThree]">
        <input type="hidden" value="Quiz not taken by user" id="QuizAnswerFour" name="properties[QuizAnswerFour]">
    </div>
    {% endif %}
    {% endcomment %}
    <style>
        .cu-upscribe {
            position: relative;
            width: 100%;
            margin-top: 20px;
            padding: 0 1px;
        }

        .cu-productTypeSelect{
            flex-wrap: wrap;
            display: flex;
            flex-direction: row;
        }

        .cu-productTypeSelect__itemWrap {
            width:50%;
            display: flex;
        }

        .cu-productTypeSelect__itemLabel {
            position: relative;
            margin: 0;
            font-size: 16px;
            letter-spacing: .23px;
            line-height: 21px;
            color: #21211e;
            font-weight: 400;
            text-transform: capitalize;
            border: 1px solid #D1CFCC;
            padding: 4px;
            background: #fff;
            width: 100%;
            line-height: normal;
            cursor: pointer;
            display: block;
        }

        .cu-productTypeSelect__itemLabel input{
            opacity: 0;
            visibility: hidden;
            height:0 !important;
            width:0 !important;
            overflow: hidden;
        }

        .cu-productTypeSelect__itemWrap.is-active .cu-productTypeSelect__itemLabel{
            border-color: #AF5D00;
            border-width: 1px;
        }

        .cu-productTypeSelect__itemWrap.cu-productTypeSelect__itemSub.is-active .cu-productTypeSelect__itemLabel{
            border-right-width: 1px;
        }

        .cu-productTypeSelect__itemWrap.cu-productTypeSelect__itemOneTime.is-active .cu-productTypeSelect__itemLabel{
            border-left-width: 1px;
        }

        .cu-productTypeSelect__itemWrap.is-active .cu-productTypeSelect__itemLabel{
            border-color: #AF5D00;
            border-width: 1px;
        }

        .cu-productTypeSelect__itemWrap.is-active .cu-productTypeSelect__itemLabel .cu-productTypeSelect__itemBox{
            background: #f7f6f3;
        }

        .cu-productTypeSelect__itemBox{
            background: #fff;
            min-height: 80px;
            text-align: center;
            position: relative;
        }

        @media (min-width: 768px) {
            .cu-productTypeSelect__itemBox {
                min-height: 101px;
            }
        }

        .cu-option__mainText:before,
        .cu-productTypeSelect__itemBox:before{
            content: "";
            width: 20px;
            height: 20px;
            left: 15px;
            top: 12px;
            background-color: white;
            border-radius: 50%;
            border: 1px solid black;
            background-size: 13px auto !important;
            z-index: 10;
            position:absolute;
           
        }
        .cu-option__mainText:after,
        .cu-productTypeSelect__itemBox:after{
            content: "";
            width: 10px;
            height: 10px;
            left: 15px;
            top: 12px;
            background-color: black;
            border-radius: 50%;
            background-size: 13px auto !important;
            z-index: 10;
            position:absolute;
           
        }
        .cu-productTypeSelect__itemWrap.is-active .cu-productTypeSelect__itemBox:before{
            background: url(https://cdn.shopify.com/s/files/1/0079/7193/0170/files/check2.svg?v=1644402975) no-repeat 50% 55%;
            background-color: white;
        }


        .cu-productTypeSelect__itemContent {
            font-size: 16px;
            position: absolute;
            left: 0;
            top: 50%;
            transform: translateY(-50%);
            width: 100%;
            padding: 0;
            font-weight: 700;
        }

        .cu-productTypeSelect__itemText{
            position: relative;
        }

        .cu-options {
            width: 100%;
            margin-bottom: 5px;
        }

        .cu-options--frequency {
            margin-top: 14px;
        }

        @media (min-width: 768px) {
            .cu-options--frequency {
                margin-top: 23px;
            }
        }

        .cu-optionsTitle {
            display: block;
            margin-bottom: 0px;
            font-size: 13px;
            letter-spacing: 2px;
            font-weight: bold;
            text-transform: uppercase;
            text-align: left;
        }

        .cu-optionsGrid {
            display: flex;
            flex-wrap: wrap;
            flex-direction: row;
        }

        .cu-option {
            font-size: 16px;
            letter-spacing: .23px;
            line-height: 21px;
            color: #21211e;
            font-weight: 400;
            text-transform: capitalize;
            border: 1px solid #D1CFCC;
            padding: 4px;
            background: #fff;
            width: 33.3333%;
            position: relative;
            cursor: pointer;
        }

        .cu-option:active,
        .cu-option:hover,
        .cu-option:focus,
        .cu-option.is-active {
            border-color: #AF5D00;
            background: none;

        }

        .cu-option:nth-child(1).is-active{
            border-left-width:1px;
            border-top-width:1px;
            border-bottom-width:1px;
        }
        .cu-option:nth-child(2).is-active{
            border-top-width:1px;
            border-bottom-width:1px;
        }
        .cu-option:nth-child(3).is-active{
            border-right-width:1px;
            border-top-width:1px;
            border-bottom-width:1px;
        }

        .cu-option.is-active .cu-option__check {
            display: block;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .cu-option.is-active .cu-option__check svg {
            width: 13px;
            fill-color: white;
            fill: white;
            margin-left: -1px;
            margin-bottom: -1px;
        }

        .cu-option__check {
            display: none;
            position: absolute;
            transform: translateX(-50%) translateY(-50%);
            left: 50%;
            top: -2px;
            background-color: #7FC464;
            border-radius: 100px;
            color: #fff;
            width: 24px;
            height: 24px;
        }

        .cu-option__mainText {
            background: #fff;
            min-height: 60px;
            text-align: center;
            position: relative;
            display: block;
        }

        @media (min-width: 768px) {
            .cu-option__mainText {
                min-height: 70px;
            }
        }

        .cu-option.is-active .cu-option__mainText {
            background: #f7f6f3;
            position: :relative;
        }

        .cu-option.is-active .cu-option__mainText:before {
            opacity:1;
        }

        .cu-option__mainText span{
            position: absolute;
            left: 0;
            top: 50%;
            transform: translateY(-50%);
            width: 100%;
            padding: 0 20px;
            font-weight: 700;
        }

        .cu-option__subText {
            font-size: 16px;
            width: 100%;
            max-width: 250px;
            margin-ttop: 6px;
            letter-spacing: 0;
            font-weight: 400;
            text-align: center;
        }


        .cu-popup {
            display: inline-block;
            padding: 8px;
        }
        .cu-popup__hover {
            display: inline-block;
            position: relative;
            height: 35px;
            clear: both;
            cursor: pointer;
        }
        .cu-popup__block {
            display: none;
            position: absolute;
            text-align: left;
            left: -200px;
            right: auto;
            bottom: 160%;
            font-size: 13px;
            top: inherit;
            background-color: #222;
            width: 300px;
            border-radius: 5px;
            z-index: 50;
        }
        @media (min-width: 500px) {
            .cu-popup__block {
                left: -3px;
                right: auto;
            }
        }
        .cu-popup__block--isOpen {
            display: block;
        }
        .cu-popup__block:before {
            display: none;
            content: "";
            width: 1px;
            border: 10px solid transparent;
            border-bottom-color: black;
            position: absolute;
            top: -20px;
            left: 0;
            border-bottom-color: #3D3D38;
            border-bottom-color: transparent;
            border-top-color: #3D3D38;
            top: inherit;
            left: 3px;
            bottom: -20px;
        }
        @media (min-width: 500px) {
            .cu-popup__block:before {
                display: block;
            }
        }
        .cu-popup__block__content {
            line-height: 1.5;
            padding: 16px;
            font-size: 13px;
            color: #fff;
            margin-bottom: 8px;
            letter-spacing: 0;
        }
        .cu-popup__block__content a {
            color: #32a6fb;
            margin-top: 5px;
            display: inline-block;
        }
        .cu-popup__block__footer {
            padding: 0;
            margin-bottom: 25px;
            text-align: right;
            height: 28px;
        }
        .cu-popup__icon {
            vertical-align: middle;
            position: relative;
            height: 40px;
            top: 2px;
        }
        .cu-popup__popup {
            display: none;
            position: absolute;
            top: 100%;
            cursor: default;
            left: 0;
        }
        .cu-infoOpener {
            display: inline-block;
            position: relative;
            transform: translateY(3px);
            cursor: pointer;
        }

        .cu-infoOpener svg {
            width: 20px;
            height: 20px;
        }

        .cu-infoOpener:hover .cu-popup__block,
        .cu-infoOpener:active .cu-popup__block,
        .cu-infoOpener:focus .cu-popup__block {
            display: block;
        }
    </style>

    {% comment %} Vue for Upscribe logic {% endcomment %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.10/vue.js"></script>


    <section id="upscribe-subscription-product-{{ product.id }}" class="cu-upscribe">

        <div class="cu-subscription-inputs" v-if="subscriptionSelected">

            <input v-if="finalSubscriptionProperty" type="hidden" :value="{{subEnable}}" name="properties[SubscriptionEnable]" class="js-sub-input-value">

            <input v-if="finalSubscriptionProperty" type="hidden" :value="finalSubscriptionProperty" name="properties[Subscription]" class="js-sub-input-value">

            <input v-if="subscriptionProductTitleDisplay" type="hidden" :value="subscriptionProductTitleDisplay" name="properties[Subscription Product Title]" class="js-sub-input-title">

            <input v-if="subscriptionAmount" type="hidden" :value="subscriptionAmount" name="properties[Subscription Amount]" class="js-sub-input-amount">

            <input v-if="activeDiscountAmount" type="hidden" :value="activeDiscountAmount" name="properties[Discount Amount]" class="js-sub-input-discount">

            <!--input v-if="chargeLimit" type="hidden" :value="chargeLimit" name="properties[Charge Limit]"-->

            <input v-if="recurringDiscountAmount" type="hidden" :value="recurringDiscountAmount" name="properties[Recurring Discount Amount]" class="js-sub-input-recurring-discount">

            <input v-if="recurringDiscountAfterOrder" type="hidden" :value="recurringDiscountAfterOrder" name="properties[Recurring Discount After Order]" class="js-sub-input-recurring-after-discount">

            <input v-if="intervalFrequency" type="hidden" :value="intervalFrequency" name="properties[Interval Frequency]" class="js-sub-input-frequency">

            <input v-if="intervalUnit" type="hidden" :value="intervalUnit" name="properties[Interval Unit]" class="js-sub-input-unit">

        </div>

        {%assign price =product.price %}
        {%assign discount_price = price | times: 0.2%}
        {%assign discountTotal = price | minus: discount_price %}

        <p style = "display: none;" class="productOriginalPrice">{{price}}</p>


        <div class="cu-productTypeSelect">
            {%assign decimalPointer = discountTotal | split: "." %}
            {% assign decimalPointerString = decimalPointer[0] | downcase | slice : 0,2 %}
            <!-- {% assign decimalPointerInt = decimalPointer[1] | plus: 0 %}
            {%- if decimalPointerInt -%}
                {% assign discountTotalPrice = discountTotal[0] %}
            {%endif%} -->
            <div class="cu-productTypeSelect__itemWrap cu-productTypeSelect__itemOneTime" :class="{ 'is-active': productPurchaseType === 'onetime' }">
                <label class="cu-productTypeSelect__itemLabel" for="onetime-{{ product.id }}">
                    <div class="cu-productTypeSelect__itemBox">
                        <div class="cu-productTypeSelect__itemContent">
                            <input type="radio" id="onetime-{{ product.id }}" value="onetime" v-model="productPurchaseType">
                            {%comment%}<span class="cu-productTypeSelect__itemText">${ oneTimeMessage || 'One-time Order' } </span>{%endcomment%}
                            <span data-price="{{price | money | remove: '.00'}}" class="cu-productTypeSelect__itemText">One-Time Purchase</span>
                            <span class = "cu-productTypeSelect__itemText-price" id="getOriginalPrice">{{price | money | remove: '.00'}}</span>   
                        </div>
                    </div>
                </label>
            </div>
            <div class="cu-productTypeSelect__itemWrap cu-productTypeSelect__itemSub" :class="{ 'is-active': productPurchaseType === 'subscription' }">
                <label class="cu-productTypeSelect__itemLabel" for="subscription-{{ product.id }}">
                    <div class="cu-productTypeSelect__itemBox">
                        <div class="cu-productTypeSelect__itemContent">
                            <input type="radio" id="subscription-{{ product.id }}" value="subscription" v-model="productPurchaseType">
                            {%comment%}<span class="cu-productTypeSelect__itemText">${ subscriptionMessage || 'Subscribe & Save' }</span>{%endcomment%}
                            <span data-price="{{discountTotal | money_without_currency  | remove:'.00'}}" class="cu-productTypeSelect__itemText">Membership <span style="color:#80894F;">Save 20%</span>
                           
                              
                            <span class = "cu-productTypeSelect__itemText-price" id="getDiscountPrice">{{ shop.currency }} {{discountTotal | money_without_currency  | remove:'.00'}}</span>
                              
                        </div>
                    </div>
                </label>
            </div>
        </div>

        <div
                v-if="selectFrequencyOptions && subscriptionSelected"
                class="cu-options cu-options--frequency"
        >
            <div class="rc_label_frequency__header">
                <div class="cu-optionsTitle">choose frequency</div>
                {% if product.metafields.custom_fields["disable_take_quiz_link"] == 1 %}
                {% else %}
                    <div class="c-productFrequency c-productFrequencyNeedHelp">
                        <div class="c-productFrequency__text c-productFrequency__textQuiz" data-quiz-click>
                            <span class="c-quizText__desktop">Unsure of frequency? Take quiz.</span>
                            <span class="c-quizText__mobile">Take frequency quiz.</span>
                        </div>
                    </div>
                {% endif %}
            </div>
            <span class="QuickBuy-display-time"></span>
            <div class="cu-optionsGrid">
                
                <v-option
                        v-for="(option, index) in selectFrequencyOptions"
                        :key="option.frequency"
                        :index="index"
                        :option="option"
                        :selected-index="selectedFrequencyIndex"
                        class="cu-option"
                        v-on:click-option="setFrequency"
                ></v-option>
            </div>
        </div>
    </section>
    {% assign pdt_discount = product.metafields.sf_upscribe.discount_amount %}
    {% unless pdt_discount contains '.' %}
        {% assign pdt_discount = pdt_discount | replace: '%', '.0%' %}
    {% endunless %}
    <script>
        (function (){
            let moneySymbol = '{{cart.currency.symbol}}';
            {% raw %}
            // Option select component
            var VOption_{% endraw %}{{ product.handle | replace: '-', '_' }}{% raw %} = {
                template: `
                <div class="cu-option__option"
                    v-if="option"
                    :class="{'is-active': isActive}"
                    @click="clickOption"
                >
                    <span class="cu-option__mainText"
                        v-if="option.mainText"
                    ><span>{{ option.mainText }} Days</span></span>
                    <span class="cu-option__subText"
                        v-if="option.subText"
                    >{{ option.subText }}</span>
                </div>
            `,
                computed: {
                    isActive() {
                        return this.selectedIndex === this.index
                    }
                },
                props:{
                    option: {
                        type: [Object, Boolean],
                        default: false
                    },
                    index: {
                        type: Number,
                        required: true
                    },
                    selectedIndex: {
                        type: Number,
                        required: true
                    }
                },
                methods: {
                    // emit selected val
                    clickOption() {
                        this.$emit('click-option', this.index)
                    }
                }
            }

            var upscribeSubscriptionProduct_{% endraw %}{{ product.handle | replace: '-', '_' }}{% raw %} = new Vue ({

                el: '#upscribe-subscription-product-{% endraw %}{{ product.id }}{% raw %}',

                delimiters: ['${', '}'],

                components: {
                    'v-option': VOption_{% endraw %}{{ product.handle | replace: '-', '_' }}{% raw %},
                },

                data: {
                    moneyFormat: '{{amount}}',

                    // Initialize vue component with shopify liquid data rendered in state
                    {% endraw %}
                    product: {{ product | json }},

                    subscriptionProductTitle: '{{ product.metafields.sf_upscribe.subscription_product_title | format_money }}',
                    intervalFrequncyMetafield: '{{ product.metafields.sf_upscribe.interval_frequency }}',
                    intervalUnitMetafield: '{{ product.metafields.sf_upscribe.interval_unit }}',

                    defaultGlobalDiscountAmount: '{{ shop.metafields.sf_upscribe.default_discount_amount }}',

                    discountAmount: '{{ pdt_discount }}',
                    //chargeLimit: '{{ product.metafields.sf_upscribe.charge_limit }}',

                    recurringDiscountAmount: '{{ product.metafields.sf_upscribe.recurring_discount_amount }}',
                    recurringDiscountAfterOrder: '{{ product.metafields.sf_upscribe.recurring_discount_after_order }}',

                    oneTimeMessage: '{{ shop.metafields.sf_upscribe.one_time_message }}',
                    subscriptionMessage: '{{ shop.metafields.sf_upscribe.subscribe_message }}',
                    learnMoreUrl: '{{ shop.metafields.sf_upscribe.learn_more_url }}',
                    howItWorksTitle: '{{ shop.metafields.sf_upscribe.how_it_works_title }}',
                    howItWorksText: '{{ shop.metafields.sf_upscribe.how_it_works_text }}',

                    // update on variant changes, this is used for initial setting
                    activeSubsriptionDisplayPrice: '{{ product.selected_or_first_available_variant.price }}',
                    activeSubsriptionDisplayComparePrice: '{{ product.selected_or_first_available_variant.compare_at_price }}',
                    {% raw %}

                    selectedFrequencyIndex: 0,
                    productPurchaseType: 'onetime',
                    infoIsOpen: false,
                    subscriptionPrice: null,

                    activeCurrencyString: null,
                    activeCurrencyRate: null,
                    subscriptionAmount: null
                },
                mounted() {
                    // reset
                    this.selectedFrequencyIndex = 0
                    this.productPurchaseType = 'onetime'
                    this.infoIsOpen = false
                    this.subscriptionPrice = null

                    // add listener for variant update, set in theme.js
                    // this listener could be different depeneding on if the theme uses the same base setup
                    var vm = this
                    window.addEventListener("upscribeVariantUpdate", function(event) {
                        vm.handleVariantUpdateEvent(event)
                    }, false);

                    this.activeCurrencyString = window.Shopify.currency.active
                    this.activeCurrencyRate = parseFloat(window.Shopify.currency.rate)
                },
                watch: {
                    // when onetime vs subscription is toggled
                    productPurchaseType(newVal) {

                        // if one time
                        if (newVal === 'onetime') {
                            // use stored non-discount prices from previous changes
                            var originalPrice = this.activeSubsriptionDisplayPrice || false
                            var comparePrice = this.activeSubsriptionDisplayComparePrice || false

                            // put into money format
                            var formatOriginalPrice = originalPrice ? this.formatMoney(originalPrice) : false
                            var formatComparePrice = comparePrice ? this.formatMoney(comparePrice) : false

                            // replace pricing elements with new vals
                            this.setPricingDisplayEls(formatOriginalPrice,formatComparePrice)
                        }

                        // if subscription
                        else {
                            // use stored non-discount prices from previous changes
                            var originalPrice = this.activeSubsriptionDisplayPrice || false
                            var comparePrice = this.activeSubsriptionDisplayComparePrice || false

                            // calculate subscription discount and replace pricing elements with new vals
                            this.calculateVariantPrices(originalPrice, comparePrice)
                        }
                    }
                },
                computed: {
                    // helper for if current state is subscription
                    subscriptionSelected() {
                        return this.productPurchaseType === 'subscription'
                    },
                    // subscription title, used in cart and sent to checkout for replacement
                    subscriptionProductTitleDisplay() {
                        let display = ''
                        display += this.subscriptionProductTitle ? this.subscriptionProductTitle : this.product.title
                        display += this.discountDisplay ? ' - ' + this.discountDisplay + ' off' : ''
                        return display
                    },
                    activeDiscountType() {
                        var discountAmount = this.discountAmount
                        var defaultGlobalDiscountAmount = this.defaultGlobalDiscountAmount
                        var activeDiscount = discountAmount ? discountAmount : defaultGlobalDiscountAmount

                        return activeDiscount.indexOf('$') > -1 ? '$' : '%'
                    },
                    activeDiscountAmount() {
                        var discountAmount = this.discountAmount
                        var defaultGlobalDiscountAmount = this.defaultGlobalDiscountAmount

                        return discountAmount ? discountAmount :
                            defaultGlobalDiscountAmount ? defaultGlobalDiscountAmount : 0
                    },
                    /*chargeLimit() {
                        var chargeLimit = this.chargeLimit ? this.chargeLimit : 0
                    },*/
                    // build frequency options for select boxes
                    selectFrequencyOptions() {
                        var intervalFrequency = this.intervalFrequency
                        var intervalUnit = this.intervalUnit

                        if (!intervalFrequency || ! intervalUnit) return false

                        return intervalFrequency.split(',').map(function(frequency) {
                            return {
                                value: frequency.trim(),
                                mainText: frequency.trim(),
                                subText: false
                            }
                        })
                    },
                    // plural unit display check
                    finalSubscriptionProperty() {
                        var selectedFrequency = this.selectedFrequency
                        var unit = this.intervalUnit
                        if (!this.subscriptionSelected) return false

                        if (selectedFrequency > 1) {
                            return selectedFrequency + ' ' + unit + 's'
                        } else {
                            return selectedFrequency + ' ' + unit
                        }
                        
                    },
                    selectedFrequency() {
                        return this.selectFrequencyOptions[this.selectedFrequencyIndex].value
                        
                    },
                    intervalUnit() {
                        return this.intervalUnitMetafield ? this.intervalUnitMetafield : 'day'
                    },
                    intervalFrequency() {
                        return this.intervalFrequncyMetafield ? this.intervalFrequncyMetafield : '15,30,45,60'
                    },
                },
                methods: {
                    setFrequency(val) {
                        this.selectedFrequencyIndex = val
                    },
                    discountCalculatedValue(total) {
                        var discountType = this.activeDiscountType
                        var discountAmount = this.activeDiscountAmount.replace('%', '');

                        var calcDiscountAmount = 0

                        if (discountType === '$') { // fixed
                            calcDiscountAmount = discountAmount
                        } else if (discountType === '%') { //percentage
                            calcDiscountAmount = (total * discountAmount) / 100

                        } else {
                            console.log('discount_amount should include % for "percentage" or $ for "fixed"')
                        }
                        return total - calcDiscountAmount
                    },
                    // replace pricing values, for compare and regular pricing
                    setPricingDisplayEls(original, compare) {

                        var regularEl = document.querySelector(".upscribe-price-item-regular");
                        var saleEl = document.querySelector(".upscribe-price-item-sale");

                        if (compare) {
                            regularEl.innerHTML = compare;
                            saleEl.innerHTML = moneySymbol + Math.round(original);
                        }

                        else {
                            regularEl.innerHTML = moneySymbol + Math.round(original);
                            saleEl.innerHTML = '';
                        }
                    },
                    // on event triggered from variant change in select boxes
                    handleVariantUpdateEvent(event) {
                        
                        var variant = event.detail
                        var originalPrice = variant.price || false
                        var originalComparePrice = variant.compare_at_price || false

                        // calculate and set new values
                        this.calculateVariantPrices(originalPrice, originalComparePrice)

                        // store values if subscription isn't currently selected
                        this.activeSubsriptionDisplayPrice = originalPrice
                        this.activeSubsriptionDisplayComparePrice = originalComparePrice
                    },
                    getFinalCurrencyRate(amount) {
                        return ((amount / this.activeCurrencyRate)).toFixed(2)
                    },
                    calculateVariantPrices(originalPrice, originalComparePrice) {
                        var displayDiscountPrice = false
                        var displayDiscountComparePrice = false

                        if (originalPrice) {
                            var originalPriceEl = document.querySelector(".upscribe-price-item-regular");
                            var discountPrice = originalPrice - this.discountCalculatedValue(originalPrice)

                            // set for passing in cart property to checkout - not formatted
                            //this.subscriptionAmount = this.getFinalCurrencyRate(originalPrice - discountPrice)

                            displayDiscountPrice = this.formatMoney(originalPrice - discountPrice)
                            this.subscriptionAmount = displayDiscountPrice

                            //displayDiscountPrice = displayDiscountPriceValue.replace(/[^0-9]+00/g, '');


                        }

                        if (originalComparePrice) {
                            var discountComparePrice = originalComparePrice - this.discountCalculatedValue(originalComparePrice)

                            displayDiscountComparePrice = this.formatMoney(originalComparePrice - discountComparePrice)

                        }

                        // replace price elements if subscription selected
                        if (this.subscriptionSelected) {
                           
                            let getTimeWrapper;
                            let getTime;
                            let getOptions;
                          
                             setTimeout(()=>{
                                getOptions = document.querySelectorAll(".cu-optionsGrid");
                                getTime = document.querySelectorAll(".c-productInfo__subscription .cu-option__option.cu-option.is-active");
                                getTimeWrapper = document.querySelectorAll(".QuickBuy-display-time");
                                for(let a = 0;a<getOptions.length;a++){
                                    getOptions[a].addEventListener("click",()=>{
                                    getOptions[a].style.opacity = "0";
                                
                                    })
                                    
                                }
                                
                             },100)
                                  
                                   
                             
                             
                                 
                            this.setPricingDisplayEls(displayDiscountPrice, displayDiscountComparePrice)
                        }

                        // if onetime selected, store to use if selected next
                        else{
                            this.activeSubsriptionDisplayPrice = displayDiscountPrice
                            this.activeSubsriptionDisplayComparePrice = displayDiscountComparePrice
                        }
                    },
                    // shopify format money
                    formatMoney(cents, format) {
                        if (typeof cents === 'string') {
                            cents = cents.replace('.', '');
                        }
                        var value = '';
                        var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
                        var formatString = format || this.moneyFormat;

                        function formatWithDelimiters(number, precision, thousands, decimal) {
                            thousands = thousands || ',';
                            decimal = decimal || '.';

                            if (isNaN(number) || number === null) {
                                return 0;
                            }

                            number = (number / 100.0).toFixed(precision);

                            var parts = number.split('.');
                            var dollarsAmount = parts[0].replace(
                                /(\d)(?=(\d\d\d)+(?!\d))/g,
                                '$1' + thousands
                            );
                            var centsAmount = parts[1] ? decimal + parts[1] : '';

                            return Math.round(dollarsAmount + centsAmount);
                        }

                        switch (formatString.match(placeholderRegex)[1]) {
                            case 'amount':
                                value = formatWithDelimiters(cents, 2);
                                break;
                            case 'amount_no_decimals':
                                value = formatWithDelimiters(cents, 0);
                                break;
                            case 'amount_with_comma_separator':
                                value = formatWithDelimiters(cents, 2, '.', ',');
                                break;
                            case 'amount_no_decimals_with_comma_separator':
                                value = formatWithDelimiters(cents, 0, '.', ',');
                                break;
                            case 'amount_no_decimals_with_space_separator':
                                value = formatWithDelimiters(cents, 0, ' ');
                                break;
                            case 'amount_with_apostrophe_separator':
                                value = formatWithDelimiters(cents, 2, "'");
                                break;
                        }

                        return formatString.replace(placeholderRegex, value);
                    }
                },
                // remove listener
                destroyed() {
                    window.removeEventListener('upscribeVariantUpdate', this.handleVariantUpdateEvent);
                }
            })
        })()
    </script>
{% endraw %}
{% endif %}

